#!/usr/bin/env python

import os
import yaml
import argparse

class literal(str): pass
def literal_presenter(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
yaml.add_representer(literal, literal_presenter)

def generate_parser():
    parser = argparse.ArgumentParser(
        description="Generates a pipeline job with an inline script in place of the Jenkinsfile that would otherwise be pulled from SCM",
        )
    parser.add_argument(
        "-j", "--job", required=True,
        help="the pipleine job to convert"
        )
    parser.add_argument(
        "-o", "--output", required=False,
        help="the output directory",
        )
    return parser


args = generate_parser().parse_args()
job =  os.path.abspath(args.job)
outputDir = os.path.abspath(args.output) if args.output else os.path.dirname(job)

if not os.path.exists(outputDir):
    os.makedirs(outputDir)

with open(job, 'r') as stream:
    try:
        y = yaml.load(stream)
        scriptPath = y[0]['job']['pipeline-scm']['script-path']
        jobName = y[0]['job']['name']
        with open(scriptPath, 'r') as myfile:
            data=myfile.read()
            y[0]['job']['dsl'] = literal(data)
            del y[0]['job']['pipeline-scm']
        outFilePath = os.path.join(outputDir, jobName.replace("/", "-") + ".yaml")
        print outFilePath
        with open(outFilePath, 'w') as outfile:
            yaml.dump(y, outfile, default_flow_style=False, allow_unicode=True)
    except yaml.YAMLError as exc:
        print(exc)
