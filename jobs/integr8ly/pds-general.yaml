---

- job:
    name: pds-general
    project-type: pipeline
    description: "General pipeline for PDS testing."
    sandbox: false
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: 56
    parameters:
        - string:
            name: YOURCITY
            description: "City or Customer (5 char min.) plus the generated hash, e.g. qebrno-5d10 [required]"
        - string:
            name: GH_CLIENT_ID
            description: "GitHub OAuth Client ID, required for some of the walkthroughs. Can be left empty"
        - string:
            name: GH_CLIENT_SECRET
            description: "GitHub OAuth Client Secret, required for some of the walkthroughs. Can be left empty"
        - bool:
            name: SELF_SIGNED_CERTS
            default: true
            description: "Indicates whether the cluster uses self signed certificates or not.
This needs to be changed to 'false' for Integreatly Workshop since it uses valid certificates."
        - string:
            name: RECIPIENTS
            default: integreatly-qe@redhat.com
            description: "Whitespace- or comma-separated list of recipient addresses"
        - string:
            name: INSTALLATION_REPOSITORY
            default: https://github.com/integr8ly/installation.git
            description: "Repository of the Integreatly installer"
        - string:
            name: INSTALLATION_BRANCH
            default: master
            description: "Branch of the installer repository"
        - string:
            name: TEST_SUITES_REPOSITORY
            default: https://gitlab.cee.redhat.com/integreatly-qe/integreatly-qe.git
            description: "Repository of the Integreatly test suites"
        - string:
            name: TEST_SUITES_BRANCH
            default: master
            description: "Branch of a repository of Integreatly test suites"
        - choice:
            name: TO_DO
            description: "It specifies what stages of the pipeline will be executed.
'heavy' means uninstall + uninstall + install + install + tests + uninstall + install"
            choices:
              - heavy
              - uninstall + uninstall
              - install + install
              - uninstall + install
              - tests only
              - install + tests
              - uninstall + install + tests
              - none
    dsl: |
        def err = null
        try {
            timeout(180) { ansiColor('gnome-terminal') { timestamps {
                node('cirhos_rhel7') {        
                    stage('Verify input') {
                        if (!YOURCITY) {
                            throw new hudson.AbortException('YOURCITY parameter is required!')
                        } // if
                    } // stage
                    
                    stage ('Uninstall #1') {
                        if(TO_DO.contains('heavy') || TO_DO.contains('uninstall')) {
                            build job: 'uninstallation-pipeline', parameters: [
                                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                                string(name: 'ANSIBLE_USER', value: 'ec2-user'),
                                string(name: 'YOURCITY', value: "${YOURCITY}"),
                                string(name: 'BASTION_USER', value: 'ec2-user'),
                                string(name: 'BASTION_PRIVATE_KEY_ID', value: 'pds-bastion-pem')]
                                
                            // Waiting for 5 minutes so that resources scheduled for termination are actually terminated
                            sleep time: 5, unit: 'MINUTES'
                        } else {
                            println 'Uninstall #1 skipped'
                        }
                    } // stage
                    
                    stage ('Uninstall #2') {
                        if(TO_DO.contains('heavy') || TO_DO.count('uninstall') >= 2) {
                            build job: 'uninstallation-pipeline', parameters: [
                                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                                string(name: 'ANSIBLE_USER', value: 'ec2-user'),
                                string(name: 'YOURCITY', value: "${YOURCITY}"),
                                string(name: 'BASTION_USER', value: 'ec2-user'),
                                string(name: 'BASTION_PRIVATE_KEY_ID', value: 'pds-bastion-pem')]
                                
                            // Waiting for 1 minute so that resources scheduled for termination are actually terminated
                            // Since this is 2nd uninstall there is no need for a long wait here
                            sleep time: 1, unit: 'MINUTES'
                        } else {
                            println 'Uninstall #2 skipped'
                        }
                    } // stage
                    
                    stage('Install #1') {
                        if(TO_DO.contains('heavy') || TO_DO.contains('install')) {
                            build job: 'installation-pipeline', parameters: [
                                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                                string(name: 'GH_CLIENT_ID', value: "${GH_CLIENT_ID}"),
                                string(name: 'GH_CLIENT_SECRET', value: "${GH_CLIENT_SECRET}"),
                                booleanParam(name: 'SELF_SIGNED_CERTS', value: Boolean.valueOf("${SELF_SIGNED_CERTS}")),
                                string(name: 'ANSIBLE_USER', value: 'ec2-user'),
                                string(name: 'YOURCITY', value: "${YOURCITY}"),
                                string(name: 'BASTION_USER', value: 'ec2-user'),
                                string(name: 'BASTION_PRIVATE_KEY_ID', value: 'pds-bastion-pem')]
                                
                            if(TO_DO.contains('heavy') || TO_DO.contains('tests') || TO_DO.count('install') >= 2) {
                                sleep time: 3, unit: 'MINUTES'
                            }
                        } else {
                            println 'Install #1 skipped'
                        }
                    } // stage

                    stage('Install #2') {
                        if(TO_DO.contains('heavy') || TO_DO.count(' install') >= 2) {
                            build job: 'installation-pipeline', parameters: [
                                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                                string(name: 'GH_CLIENT_ID', value: "${GH_CLIENT_ID}"),
                                string(name: 'GH_CLIENT_SECRET', value: "${GH_CLIENT_SECRET}"),
                                booleanParam(name: 'SELF_SIGNED_CERTS', value: Boolean.valueOf("${SELF_SIGNED_CERTS}")),
                                string(name: 'ANSIBLE_USER', value: 'ec2-user'),
                                string(name: 'YOURCITY', value: "${YOURCITY}"),
                                string(name: 'BASTION_USER', value: 'ec2-user'),
                                string(name: 'BASTION_PRIVATE_KEY_ID', value: 'pds-bastion-pem')]
                                
                            if(TO_DO.contains('heavy')) {
                                sleep time: 3, unit: 'MINUTES'
                            }
                        } else {
                            println 'Install #2 skipped'
                        }
                    } // stage
                    
                    stage('Smoke Tests') {
                        if(TO_DO.contains('heavy') || TO_DO.contains('tests')) {
                            buildStatus = build(job: 'installation-smoke-tests', propagate: false, parameters: [
                                string(name: 'REPOSITORY', value: "${TEST_SUITES_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${TEST_SUITES_BRANCH}"),
                                string(name: 'CLUSTER_URL', value: "https://master.${YOURCITY}.openshiftworkshop.com"),
                                string(name: 'ADMIN_USERNAME', value: 'admin@example.com'),
                                string(name: 'ADMIN_PASSWORD', value: 'Password1')]).result
                                
                            println "Build finished with ${buildStatus}"
                            
                            if(buildStatus != 'SUCCESS') {
                                currentBuild.result = 'UNSTABLE'
                            }
                        } else {
                            println 'Smoke Tests skipped'
                        }
                    } // stage

                    stage('Browser Based Tests') {
                        if(TO_DO.contains('heavy') || TO_DO.contains('tests')) {
                            buildStatus = build(job: 'browser-based-testsuite-pipeline', propagate: false, parameters: [
                                string(name: 'REPOSITORY', value: "${TEST_SUITES_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${TEST_SUITES_BRANCH}"),
                                string(name: 'WEBAPP_URL', value: "https://tutorial-web-app-webapp.apps.${YOURCITY}.openshiftworkshop.com"),
                                string(name: 'CLUSTER_URL', value: "https://master.${YOURCITY}.openshiftworkshop.com"),
                                string(name: 'ADMIN_USERNAME', value: 'admin@example.com'),
                                string(name: 'ADMIN_PASSWORD', value: 'Password1'),
                                string(name: 'EVALS_PASSWORD', value: 'Password1'),
                                string(name: 'EVALS_USERNAME', value: 'evals23@example.com')]).result
                            
                            println "Build finished with ${buildStatus}"
                            
                            if(buildStatus != 'SUCCESS') {
                                currentBuild.result = 'UNSTABLE'
                            }
                            
                            sleep time: 3, unit: 'MINUTES'
                        } else {
                            println 'Browser Based Tests skipped'
                        }
                    } // stage
                    
                    stage('After First Login Tests') {
                        if(TO_DO.contains('heavy') || TO_DO.contains('tests')) {
                            buildStatus = build(job: 'after-first-login-tests', propagate: false, parameters: [
                                string(name: 'REPOSITORY', value: "${TEST_SUITES_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${TEST_SUITES_BRANCH}"),
                                string(name: 'CLUSTER_URL', value: "https://master.${YOURCITY}.openshiftworkshop.com"),
                                string(name: 'ADMIN_USERNAME', value: 'admin@example.com'),
                                string(name: 'ADMIN_PASSWORD', value: 'Password1'),
                                string(name: 'EVALS_USERNAME', value: 'evals23@example.com')]).result
                            
                            println "Build finished with ${buildStatus}"
                                
                            if(buildStatus != 'SUCCESS') {
                                currentBuild.result = 'UNSTABLE'
                            }
                        } else {
                            println 'After First Login Tests skipped'
                        }
                    } // stage 

                    stage ('Uninstall #3') {
                        if(TO_DO.contains('heavy')) {
                            build job: 'uninstallation-pipeline', parameters: [
                                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                                string(name: 'ANSIBLE_USER', value: 'ec2-user'),
                                string(name: 'YOURCITY', value: "${YOURCITY}"),
                                string(name: 'BASTION_USER', value: 'ec2-user'),
                                string(name: 'BASTION_PRIVATE_KEY_ID', value: 'pds-bastion-pem')]

                            sleep time: 3, unit: 'MINUTES'
                        } else {
                            println 'Uninstall #3 skipped'
                        }
                    } // stage
                    
                    stage('Install #3') {
                        if(TO_DO.contains('heavy')) {
                            build job: 'installation-pipeline', parameters: [
                                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                                string(name: 'GH_CLIENT_ID', value: "${GH_CLIENT_ID}"),
                                string(name: 'GH_CLIENT_SECRET', value: "${GH_CLIENT_SECRET}"),
                                booleanParam(name: 'SELF_SIGNED_CERTS', value: Boolean.valueOf("${SELF_SIGNED_CERTS}")),
                                string(name: 'ANSIBLE_USER', value: 'ec2-user'),
                                string(name: 'MASTER_URLS', value: "master1.${YOURCITY}.internal"),
                                string(name: 'BASTION_USER', value: 'ec2-user'),
                                string(name: 'BASTION_URL', value: "bastion.${YOURCITY}.openshiftworkshop.com"),
                                string(name: 'BASTION_PRIVATE_KEY_ID', value: 'pds-bastion-pem')]
                        } else {
                            println 'Install #3 skipped'
                        }
                    } // stage
                } // node
            }}} // timeout, ansiColor, timestamps
        } catch (caughtError){
            currentBuild.result = 'FAILURE'
            err = caughtError 
        } finally {
            notifyBuild(currentBuild.result, err)
        }

        def notifyBuild(String buildStatus, err) {
            
            // In theory, null means success. In practise if there is an error thrown elsewhere than in the triggered jobs (eg. in wokraround scripts)
            // the job fails but success will be stored in buildStatus anyway
            buildStatus =  buildStatus ?: 'SUCCESS'
            
            String mailRecipients = "${RECIPIENTS}"
            String subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
            String body = "${subject}\n\n(${env.BUILD_URL})"

            if(err != null){
                body = "${body}\n\n FAILURE was ${err}"
            }

            mail body: body, subject: subject, to: mailRecipients
        }

