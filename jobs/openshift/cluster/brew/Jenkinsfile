#!groovy
@Library('delorean-pipeline-library')

def imageSyncOptions = [:]

def verifyImageSyncOptions(options) {
    if(!options.openshiftMasterUrl || !options.clusterAdminUsername || !options.clusterAdminPassword || !options.installationGitBranch || !options.installationGitUrl) {
        def clusterAdminCredentials = setClusterAdminCredentials()
        def userInput = input message: 'Image Sync Options', parameters: [
            string(defaultValue: (options.openshiftMasterUrl ?: ''), description: 'OpenShift cluster public URL', name: 'openshiftMasterUrl'),
            string(defaultValue: (options.clusterAdminUsername ?: clusterAdminCredentials.clusterAdminUsername), description: 'OpenShift cluster admin username', name: 'clusterAdminUsername'),
            string(defaultValue: (options.clusterAdminPassword ?: clusterAdminCredentials.clusterAdminPassword), description: 'OpenShift cluster admin password', name: 'clusterAdminPassword'),
            string(defaultValue: (options.installationGitUrl ?: 'https://github.com/integr8ly/installation.git'), description: 'Integreatly installer Git URL', name: 'installationGitUrl'),
            string(defaultValue: (options.installationGitBranch ?: 'master'), description: 'Integreatly installer Git branch', name: 'installationGitBranch'),
        ]
        options.openshiftMasterUrl = userInput.openshiftMasterUrl
        options.clusterAdminUsername = userInput.clusterAdminUsername
        options.clusterAdminPassword = userInput.clusterAdminPassword
        options.installationGitUrl = userInput.installationGitUrl
        options.installationGitBranch = userInput.installationGitBranch
        verifyImageSyncOptions(options)
    }
}

def setClusterAdminCredentials() {
    def integreatlyCredentialsID = 'tower-openshift-cluster-credentials'
    def clusterAdminCredentials = [:]
    withCredentials([usernamePassword(credentialsId: integreatlyCredentialsID, usernameVariable: 'CLUSTER_ADMIN_USERNAME', passwordVariable: 'CLUSTER_ADMIN_PASSWORD')]) {
        clusterAdminCredentials.clusterAdminUsername = "${CLUSTER_ADMIN_USERNAME}"
        clusterAdminCredentials.clusterAdminPassword = "${CLUSTER_ADMIN_PASSWORD}"
    }

    return clusterAdminCredentials
}

String getHost(String url) {
    URI uri = new URI(url);
    String[] urlParts = uri.getHost().split(/\./).takeRight(3)
    return urlParts.join('.')
}

stage('Image Sync Options') {
    def clusterAdminCredentials = setClusterAdminCredentials()
    imageSyncOptions.openshiftMasterUrl = params.openshiftMasterUrl
    imageSyncOptions.clusterAdminUsername = params.clusterAdminUsername ?: clusterAdminCredentials.clusterAdminUsername // Defaults to the username stored in tower-openshift-cluster-credentials
    imageSyncOptions.clusterAdminPassword = params.clusterAdminPassword ?: clusterAdminCredentials.clusterAdminPassword // Defaults to the password stored in tower-openshift-cluster-credentials
    imageSyncOptions.installationGitUrl = params.installationGitUrl
    imageSyncOptions.installationGitBranch = params.installationGitBranch
    verifyImageSyncOptions(imageSyncOptions)
    
    println "Image Sync Options: ${imageSyncOptions}"
    currentBuild.displayName = "${currentBuild.displayName} ${imageSyncOptions.installationGitBranch}"
    currentBuild.description = imageSyncOptions.openshiftMasterUrl
}

def githubSSHCredentialsID = 'jenkinsgithub'
def imageSyncConfigFile = './integreatly.yml'
String brewContainerRegistry
def projectsToSync
def syncImages = false

node('cirhos_rhel7') {
    cleanWs()
    stage('Ensure Sync File Exists') {
        dir('installation') {
            gitCheckoutRepo(imageSyncOptions.installationGitUrl, imageSyncOptions.installationGitBranch, githubSSHCredentialsID, '.')
            syncImages = fileExists imageSyncConfigFile

            if (!syncImages) {
                println "Image sync file '${imageSyncConfigFile}' is not available. No images to sync, skipping!"
            }
        }
    }

    stage('Get Images To Sync') {
        when(syncImages) {
            dir('installation') {
                def imageSyncConfigContent = readYaml file: imageSyncConfigFile
                projectsToSync = imageSyncConfigContent.imageSync
                brewContainerRegistry = imageSyncConfigContent.sourceRepo
            }
        }
    }

    stage('Authenticate to OpenShift') {
        when(syncImages) {
            sh "oc login ${imageSyncOptions.openshiftMasterUrl} -u ${imageSyncOptions.clusterAdminUsername} -p ${imageSyncOptions.clusterAdminPassword} --insecure-skip-tls-verify"
            imageSyncOptions.clusterAdminAuthToken = sh(returnStdout: true, script: "oc whoami -t").trim()
        }
    }

    stage('Create Brew Projects') {
        when(syncImages) {
            String clusterContainerRegistryConsole = "registry-console-default.apps.${getHost(imageSyncOptions.openshiftMasterUrl)}" 
            projectsToSync.keySet().each {
                if (params.dryRun) {
                    println "Would create a new project called '${it}' and set the registry project access policy to 'Anonymous: Allow all unauthenticated users to pull images'"
                } else {
                    sh "oc new-project ${it} || true"
                    // Set registry project access policy to Anonymous: Allow all unauthenticated users to pull images
                    sh "oc create rolebinding registry-viewer --clusterrole=registry-viewer || true"
                    sh "oc adm policy add-role-to-group registry-viewer system:authenticated system:unauthenticated || true"
                    println "https://${clusterContainerRegistryConsole}/registry#/projects/${it}"
                }
            }
        }
    }

    stage('Sync Images') {
        when(syncImages) { 
            String clusterContainerRegistryPublic = "docker-registry-default.apps.${getHost(imageSyncOptions.openshiftMasterUrl)}"
            projectsToSync.each { project, projectConfig ->
                println "Syncing images for ${project}"
                brewContainerRegistry = projectConfig.sourceRepo ?: brewContainerRegistry

                if (!brewContainerRegistry) {
                  error "Brew container registry was not specified"
                } else {
                    projectConfig.images.each {
                        def brewImageUrl = "${brewContainerRegistry}/${project}/${it}"
                        def clusterImageUrlPub = "${clusterContainerRegistryPublic}/${project}/${it}"

                        if (params.dryRun) {
                            println "Would copy the image '${it}' from ${brewImageUrl} to ${clusterImageUrlPub}"
                        } else {
                            retry(3) {
                                sh """
                                  skopeo copy \
                                  --dest-creds ${imageSyncOptions.clusterAdminUsername}:${imageSyncOptions.clusterAdminAuthToken} \
                                  --dest-tls-verify=false \
                                  --src-tls-verify=false \
                                  docker://${brewImageUrl} \
                                  docker://${clusterImageUrlPub}
                                """
                            }
                        }

                    }
                }
            }
        }
    }
}