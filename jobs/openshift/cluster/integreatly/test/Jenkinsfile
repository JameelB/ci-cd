def testOptions = [:]
final QE_REPO_URL = 'https://gitlab.cee.redhat.com/integreatly-qe/integreatly-qe.git'

def verifyParameters(testOptions) {
  if (!testOptions.gitUrl || !testOptions.gitBranch) {
    def userInput = input message: 'Integreatly Test Options', parameters: [
      string(defaultValue: (testOptions.gitUrl ?: 'https://github.com/integr8ly/installation.git'), description: 'Integreatly installer Git URL', name: 'installationGitUrl'),
      string(defaultValue: (testOptions.gitBranch ?: 'master'), description: 'Integreatly Git Branch', name: 'installationGitBranch'),
    ]

    testOptions.gitUrl = userInput.installationGitUrl
    testOptions.gitBranch = userInput.installationGitBranch
    testOptions.clusterName = userInput.installationGitBranch
    testOptions.openshiftMasterUrl = "https://${userInput.installationGitBranch}.${testOptions.domainName}"
    verifyParameters(testOptions)
  }
}

def setClusterAdminCredentials() {
  def integreatlyCredentialsID = 'tower-openshift-cluster-credentials'
  def clusterAdminCredentials = [:]
  withCredentials([usernamePassword(credentialsId: integreatlyCredentialsID, usernameVariable: 'CLUSTER_ADMIN_USERNAME', passwordVariable: 'CLUSTER_ADMIN_PASSWORD')]) {
    clusterAdminCredentials.clusterAdminUsername = "${CLUSTER_ADMIN_USERNAME}"
    clusterAdminCredentials.clusterAdminPassword = "${CLUSTER_ADMIN_PASSWORD}"
  }
  return clusterAdminCredentials
}

def clusterAdminCredentials = setClusterAdminCredentials()

pipeline {
  agent {
    node {
      label 'cirhos_rhel7'
    }
  }

  stages {
    stage('Verify Parameters') {
      steps {
        script {
          testOptions.awsAccountName = 'fheng.AWS'
          testOptions.awsRegion = 'eu-west-2'
          testOptions.clusterName = params.installationGitBranch
          testOptions.domainName = 'skunkhenry.com'
          testOptions.gitUrl = params.installationGitUrl
          testOptions.gitBranch = params.installationGitBranch
          testOptions.openshiftMasterUrl = "https://${params.installationGitBranch}.${testOptions.domainName}"
          verifyParameters(testOptions)
        }
      }
    }

    stage('Cluster Create') {
      steps {
        echo "[INFO] Creating ${testOptions.clusterName} cluster"
        script {
          def jobName = 'openshift-cluster-create'
          def jobParams = [
            [$class: 'StringParameterValue', name: 'clusterName', value: testOptions.clusterName],
            [$class: 'StringParameterValue', name: 'awsRegion', value: testOptions.awsRegion],
            [$class: 'StringParameterValue', name: 'awsAccountName', value: testOptions.awsAccountName],
            [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
          ]
          build job: jobName, parameters: jobParams
        }
      }
    }

    stage('Install Integreatly') {
      steps {
        echo "[INFO] Installing Integreatly in ${testOptions.clusterName} cluster"
        script {
          jobName = 'openshift-cluster-integreatly-install'
          jobParams = [
            [$class: 'StringParameterValue', name: 'clusterName', value: testOptions.clusterName],
            [$class: 'StringParameterValue', name: 'openshiftMasterUrl', value: testOptions.openshiftMasterUrl],
            [$class: 'StringParameterValue', name: 'installationGitUrl', value: testOptions.gitUrl],
            [$class: 'StringParameterValue', name: 'installationGitBranch', value: testOptions.gitBranch],
            [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
          ]
          build job: jobName, parameters: jobParams
        }
      } 
    }

    stage('Test Integreatly') {
      steps {
        echo "[INFO] Running Browser Tests on Integreatly"
        script { 
          jobName = 'browser-based-testsuite-pipeline'
          jobParams = [
            [$class: 'StringParameterValue', name: 'REPOSITORY', value: QE_REPO_URL],
            [$class: 'StringParameterValue', name: 'BRANCH', value: 'master'],
            [$class: 'StringParameterValue', name: 'WEBAPP_URL', value: "https://tutorial-web-app-openshift-webapp.apps.${testOptions.clusterName}.skunkhenry.com"],
            [$class: 'StringParameterValue', name: 'CLUSTER_URL', value: testOptions.openshiftMasterUrl],
            [$class: 'StringParameterValue', name: 'ADMIN_USERNAME', value: clusterAdminCredentials.clusterAdminUsername],
            [$class: 'StringParameterValue', name: 'ADMIN_PASSWORD', value: clusterAdminCredentials.clusterAdminPassword],
            [$class: 'StringParameterValue', name: 'EVALS_USERNAME', value: 'evals11@example.com'],
            [$class: 'StringParameterValue', name: 'EVALS_PASSWORD', value: 'Password1'],
            [$class: 'StringParameterValue', name: 'TIMEOUT_THRESHOLD', value: '2'],
            [$class: 'StringParameterValue', name: 'NAMESPACE_PREFIX', value: 'openshift-']
          ]
          build job: jobName, parameters: jobParams
              
          echo "[INFO] Running Walkthroughs 1 Tests on Integreatly"
                
          jobName = 'w1-test-executor'
          jobParams = [
            [$class: 'StringParameterValue', name: 'REPOSITORY', value: QE_REPO_URL],
            [$class: 'StringParameterValue', name: 'BRANCH', value: 'master'],
            [$class: 'StringParameterValue', name: 'CLUSTER_URL', value: testOptions.openshiftMasterUrl],
            [$class: 'StringParameterValue', name: 'ADMIN_USERNAME', value: clusterAdminCredentials.clusterAdminUsername],
            [$class: 'StringParameterValue', name: 'ADMIN_PASSWORD', value: clusterAdminCredentials.clusterAdminPassword],
            [$class: 'StringParameterValue', name: 'EVALS_USERNAME', value: 'evals11@example.com'],
            [$class: 'StringParameterValue', name: 'EVALS_PASSWORD', value: 'Password1'],
            [$class: 'StringParameterValue', name: 'TIMEOUT_THRESHOLD', value: '2'],
            [$class: 'StringParameterValue', name: 'NAMESPACE_PREFIX', value: 'openshift-']
          ]
          build job: jobName, parameters: jobParams
        
          echo "[INFO] Running Launcher Booster Creation Test on Integreatly"
        
          jobName = 'launcher-tests'
          jobParams = [
            [$class: 'StringParameterValue', name: 'REPOSITORY', value: QE_REPO_URL],
            [$class: 'StringParameterValue', name: 'BRANCH', value: 'master'],
            [$class: 'StringParameterValue', name: 'CLUSTER_URL', value: testOptions.openshiftMasterUrl],
            [$class: 'StringParameterValue', name: 'ADMIN_USERNAME', value: clusterAdminCredentials.clusterAdminUsername],
            [$class: 'StringParameterValue', name: 'ADMIN_PASSWORD', value: clusterAdminCredentials.clusterAdminPassword],
            [$class: 'StringParameterValue', name: 'NAMESPACE_PREFIX', value: 'openshift-'],
            [$class: 'StringParameterValue', name: 'CLEAN_RESOURCES', value: 'true']
          ]
          build job: jobName, parameters: jobParams
        }
      }
    }

    stage('Uninstall Integreatly') {
      steps {
        echo "[INFO] Uninstalling Integreatly from ${testOptions.clusterName}"
        script {
          jobName = 'openshift-cluster-integreatly-uninstall'
          jobParams = [
            [$class: 'StringParameterValue', name: 'clusterName', value: testOptions.clusterName],
            [$class: 'StringParameterValue', name: 'openshiftMasterUrl', value: testOptions.openshiftMasterUrl],
            [$class: 'StringParameterValue', name: 'installationGitBranch', value: testOptions.gitUrl],
            [$class: 'StringParameterValue', name: 'installationGitBranch', value: testOptions.gitBranch],
            [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
          ]
          build job: jobName, parameters: jobParams
        }
      }
    }
  }

  post {
    always {
      echo "[INFO] Deprovision ${testOptions.clusterName} cluster"
      script {
        if (testOptions.clusterName) {
          jobName = 'openshift-cluster-deprovision'
          jobParams = [
            [$class: 'StringParameterValue', name: 'clusterName', value: testOptions.clusterName],
            [$class: 'StringParameterValue', name: 'awsRegion', value: testOptions.awsRegion],
            [$class: 'StringParameterValue', name: 'awsAccountName', value: testOptions.awsAccountName],
            [$class: 'StringParameterValue', name: 'clusterDomainName', value: testOptions.domainName],
            [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
          ]
          build job: jobName, parameters: jobParams
        } else {
          println "[INFO] Cluster name not available, skipping deprovision"
        }
      }
    }
  }
}