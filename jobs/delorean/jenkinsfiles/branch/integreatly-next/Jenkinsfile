#!groovy

// Checkout remote repository
def checkoutGitRepo(gitUrl, gitRef, credentialsID) {
  checkout([$class: 'GitSCM', branches: [[name: gitRef]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: credentialsID, url: gitUrl]]])
}

// Get product next branches available in the installation repo
def getProductNextBranches(gitOrg, gitRepo, sourceBranch) {
  nextBranches = sh(returnStdout: true, script: "git ls-remote origin | grep next | awk '{print \$2}'").replaceAll("refs/heads/", "").split()

  // Remove integreatly-next from next branches list
  productNextBranches = nextBranches.minus(sourceBranch)
  return productNextBranches
}

def gitCreateAndCheckoutBranch(branchName, pushOnCreate = false) {
    String remoteBranchCommit = sh(returnStdout: true, script: "git ls-remote origin refs/heads/${branchName} | cut -f 1").trim()

    if (remoteBranchCommit) {
      sh "git checkout ${branchName}"
    } else {
      sh "git checkout -b ${branchName}"
      if (pushOnCreate) {
        if (params.dryRun) {
          String gitRepoUrl = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim()
          print "Would push ${branchName} to ${gitRepoUrl}"
        } else {
          sh "git push origin ${branchName}"
        }
      }
    }
}

def gitRebase(sourceBranch, targetBranch) {
  try {
    sh "git rebase origin/${targetBranch}"
  } catch (Exception e) {
    sh "git rebase --abort"
    println "We were unable to automatically rebase the target branch '${targetBranch}' into the source branch '${sourceBranch}'. Please fix these conflicts locally and push the changes to ${sourceBranch} before running this job again!"
  }
}
  
def ghOwner = "integr8ly"
def ghRepo = "installation"
def installationGitUrl = params.installationGitUrl ?: 'git@github.com:integr8ly/installation.git'
def installationProductBranch = params.installationProductBranch
def masterBranch = 'master'
def githubSSHCredentialsID = 'jenkinsgithub'
def productNextBranches = []

node {
  cleanWs()
  dir('installation') {
    stage('Fetch Installation Repo') {
      checkoutGitRepo(installationGitUrl, masterBranch, githubSSHCredentialsID)
    }

    sshagent([githubSSHCredentialsID]) {
      sh 'git config --global user.name "Automatron"'
      sh 'git config --global user.email "github.eng@feedhenry.com"'

      stage('Checkout Integreatly Next Branch') {
        gitCreateAndCheckoutBranch(installationProductBranch, true)
        gitRebase(installationProductBranch, masterBranch)
      }

      // Merge product-next branches into integreatly-next
      stage('Merge Product Next Branches') {
        productNextBranches = getProductNextBranches(ghOwner, ghRepo, installationProductBranch)

        for (i = 0; i < productNextBranches.size(); i++) {
          println "[INFO] Merging ${productNextBranches[i]} branch"
          
          sh "git pull --no-edit origin ${productNextBranches[i]}"
        }

        sh "git push origin ${installationProductBranch}"
      }
    }
  }
}
