#!groovy

//Helper methods, should eventually be moved to a shared library

//remote repository checkout
def checkoutGitRepo(gitUrl, gitRef, credentialsID) {
    checkout([$class: 'GitSCM', branches: [[name: gitRef]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: credentialsID, url: gitUrl]]])
}

//https://github.com/comquent/imperative-when
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils

def when(boolean condition, body) {
    def config = [:]
    body.resolveStrategy = Closure.OWNER_FIRST
    body.delegate = config

    if (condition) {
        body()
    } else {
        Utils.markStageSkippedForConditional(STAGE_NAME)
    }
}

import com.cloudbees.groovy.cps.NonCPS
import org.kohsuke.github.GHCommitState
import org.kohsuke.github.GHCommitStatus
import org.kohsuke.github.GHIssueState
import org.kohsuke.github.GHLabel
import org.kohsuke.github.GHPullRequest
import org.kohsuke.github.GHRepository
import org.kohsuke.github.GitHub
import org.kohsuke.github.PagedIterable
import org.kohsuke.github.GitHubBuilder
import org.kohsuke.github.GHPullRequest

@NonCPS
GHPullRequest ghGetPullRequest(GHRepository repo, String head, String base, GHIssueState state) {
    PagedIterable<GHPullRequest> pullRequests = repo.queryPullRequests()
            .head(head)
            .base(base)
            .state(state)
            .list()
    return pullRequests[0]
}

@NonCPS
GHPullRequest ghFindOrCreatePullRequest(GHRepository repo, String head, String base, String title, String body) {
    GHPullRequest pr = ghGetPullRequest(repo, head, base, GHIssueState.OPEN)
    if (pr) {
        println "Found already open PR on ${repo.getName()} head:${head} base:${base} - ${pr.getHtmlUrl()}"
    } else {
        //head for the query above requires the user e.g. fheng:branch_name, but here we only want branch_name see https://developer.github.com/v3/pulls/#list-pull-requests
        head = head.split(':').last()
        pr = repo.createPullRequest(title, head, base, body)
        println "Opened new PR on ${repo.getName()} head:${head} base:${base} - ${pr.getHtmlUrl()}"
    }
    return pr
}

@NonCPS
GHPullRequest ghGetPullRequestFromUrl(GitHub gitHub, String prUrl) {
    URL url = new URL(prUrl)
    String[] pathSegments = url.path.trim().split('/') - '' - 'pull'
    String ghOwner = pathSegments[0]
    String ghRepo = pathSegments[1]
    String ghPrNumber = pathSegments[2]
    GHRepository repo = gitHub.getRepository("${ghOwner}/${ghRepo}")
    return repo.getPullRequest(ghPrNumber as int)
}

@NonCPS
GHCommitStatus ghUpdatePrCommitStatus(GHPullRequest pr, GHCommitState state, String targetUrl, String description, String context) {
    return pr.getRepository().createCommitStatus(pr.getHead().getSha(), state, targetUrl, description, context)
}

@NonCPS
GHCommitStatus ghUpdatePrCommitStatus(GitHub gitHub, String prUrl, GHCommitState state, String targetUrl, String description, String context) {
    return ghUpdatePrCommitStatus(ghGetPullRequestFromUrl(gitHub, prUrl), state, targetUrl, description, context)
}

@NonCPS
boolean prHasLabel(GHPullRequest pr, String labelName) {
    boolean hasLabel = false
    for (GHLabel label : pr.getLabels()) {
        if(label.getName() == labelName) {
            hasLabel = true
        }
    }
    return hasLabel
}

//Helper methods

def ghOwner = "integr8ly"
def ghRepo = "installation"
def installationGitUrl = params.installationGitUrl ?: 'git@github.com:integr8ly/installation.git'
def sourceBranch = params.installationProductBranch
def targetBranch = 'master'
def githubSSHCredentialsID = 'jenkinsgithub'
def githubUserPassCredentialsID = 'githubjenkins'
def productName = params.productName
def sourceChanges = false
boolean runIntegrationTests = false
boolean dryRun = params.dryRun
String prUrl
final String ghCommitStatusContext = 'delorean/ga/integration-tests'
String integrationTestsGHLabel = "integration tests"
String productUpdateGHLabel = "product update"

node {
    cleanWs()
    stage('Checkout') {
        dir('installation') {
            checkoutGitRepo(installationGitUrl, sourceBranch, githubSSHCredentialsID)
        }
    }

    stage('Check Source vs Target') {
        dir('installation') {
            def totalCommits = sh(returnStdout: true, script: "git log origin/${targetBranch}..HEAD --pretty=o | wc -l").trim()
            if ((totalCommits as int) > 0) {
                sourceChanges = true
                println("Changes detected on ${sourceBranch}, totalCommits:${totalCommits}")
            } else {
                sourceChanges = false
                println("No changes detected on ${sourceBranch}")
            }
        }
    }

    stage('Create PR') {
        when(sourceChanges) {
            println("Creating PR for ${productName}")
            withCredentials([usernamePassword(
                    credentialsId: githubUserPassCredentialsID,
                    passwordVariable: 'GITHUB_PASSWORD',
                    usernameVariable: 'GITHUB_USERNAME')]) {
                final GitHub gitHub = new GitHubBuilder()
                        .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                        .build()
                String title = "[WIP] ${productName} update"
                String body = "Created automatically by jenkins"
                GHPullRequest pr = ghFindOrCreatePullRequest(gitHub.getRepository("${ghOwner}/${ghRepo}"), "${ghOwner}:${sourceBranch}", targetBranch, title, body)
                prUrl = pr.getHtmlUrl()
                runIntegrationTests = prHasLabel(pr, integrationTestsGHLabel)
                println "Component Update PR = ${prUrl}, runIntegrationTests = ${runIntegrationTests}"
            }
        }
    }

    stage('Integration Tests') {
        when(sourceChanges && runIntegrationTests) {
            withCredentials([usernamePassword(
                    credentialsId: githubUserPassCredentialsID,
                    passwordVariable: 'GITHUB_PASSWORD',
                    usernameVariable: 'GITHUB_USERNAME')]) {
                final GitHub gitHub = new GitHubBuilder()
                        .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                        .build()
                ghUpdatePrCommitStatus(gitHub, prUrl, GHCommitState.PENDING, env.BUILD_URL, 'Pending', ghCommitStatusContext)
            }
            try {
                def jobName = 'openshift-cluster-integreatly-test'
                def jobParams = [
                        [$class: 'StringParameterValue', name: 'installationGitUrl', value: installationGitUrl],
                        [$class: 'StringParameterValue', name: 'installationGitBranch', value: sourceBranch],
                        [$class: 'BooleanParameterValue', name: 'dryRun', value: dryRun]
                ]
                build job: jobName, parameters: jobParams
            } catch (Exception e) {
                withCredentials([usernamePassword(
                        credentialsId: githubUserPassCredentialsID,
                        passwordVariable: 'GITHUB_PASSWORD',
                        usernameVariable: 'GITHUB_USERNAME')]) {
                    final GitHub gitHub = new GitHubBuilder()
                            .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                            .build()
                    ghUpdatePrCommitStatus(gitHub, prUrl, GHCommitState.FAILURE, env.BUILD_URL, 'Failure', ghCommitStatusContext)
                    error "Integration test failures, ${installationGitUrl}, ${sourceBranch}, ${e}"
                }
            }
            withCredentials([usernamePassword(
                    credentialsId: githubUserPassCredentialsID,
                    passwordVariable: 'GITHUB_PASSWORD',
                    usernameVariable: 'GITHUB_USERNAME')]) {
                final GitHub gitHub = new GitHubBuilder()
                        .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                        .build()
                ghUpdatePrCommitStatus(gitHub, prUrl, GHCommitState.SUCCESS, env.BUILD_URL, 'Success', ghCommitStatusContext)
            }
        }
    }
}
