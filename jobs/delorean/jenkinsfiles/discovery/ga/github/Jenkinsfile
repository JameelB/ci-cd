#!groovy
@Library('delorean-pipeline-library') _

import org.integr8ly.RegistryImage

def installationGitUrl = params.installationGitUrl ?: 'git@github.com:integr8ly/installation.git'
def installationGitRef = params.installationGitRef ?: 'master'
def githubCredentialsID = params.credentialId ?: 'githubjenkins'
def githubSSHCredentialsID = params.sshCredentialId ?: 'jenkinsgithub'
def releaseTagVar = params.manifestVar ?: params.releaseTagVar
def productVersionVar = params.productVersionVar
def projectOrg = params.projectOrg
def projectRepo = params.projectRepo
def productName = params.productName
def releaseFetchMethod = params.releaseFetchMethod
def productVersionLocation = params.productVersionLocation
def productVersionIdentifier = params.productVersionIdentifier
def gaBranch = params.installationProductBranch ?: "${productName}-ga"
def gaReleaseTagRef = params.gaReleaseTagRef ?: ''
def installationManifestFile = './inventories/group_vars/all/manifest.yaml'
def isProduct = params.isProduct ?: false

def templatesDir = params.templatesDir
def registryProjectIDs = params.registryProjectIDs
String rhContainerRegistry = "registry.redhat.io"
String rhContainerRegistry2 = "registry.access.redhat.com"
def rhRegistries = [rhContainerRegistry, rhContainerRegistry2]
def targetRegistrySecret = 'intly-redhat-registry-sa'
Boolean verifyReleaseIsGA = (templatesDir && registryProjectIDs) ? true : false

currentBuild.displayName = "${currentBuild.displayName} ${productName}"

node {
    cleanWs()
    stage('Fetch Installation Repo') {
        println '[INFO] Fetch Installation Repo'
        cleanWs()
        gitCheckoutRepo(installationGitUrl, installationGitRef, githubSSHCredentialsID, 'installation')
        dir('installation') {
            if (!isProduct) {
                releaseConfig = readYaml file: installationManifestFile
            }
        }
    }

    stage('Fetch Current Integreatly Release') {
        when(!isProduct) {
            if (releaseTagVar) {
                componentRelease = releaseConfig[releaseTagVar]
            } else {
                componentRelease = releaseConfig[productVersionVar]
            }
            if (!componentRelease) {
                error "[ERROR] Unable to retrieve current release version!"
            }
            println "[INFO] componentRelease = ${componentRelease}"
        }
    }

    stage('Fetch Latest GitHub Release') {
        latestRelease = getLatestGaRelease(projectOrg, projectRepo, githubCredentialsID, releaseFetchMethod, gaReleaseTagRef)
        if (!latestRelease) {
            error "[ERROR] Unable to retrieve latest release version!"
        }
        println "[INFO] latestRelease = ${latestRelease}"
    }

    stage('Verify GA Release') {
        when(verifyReleaseIsGA) {
            dir(productName) {
                productGitUrl = "git@github.com:${projectOrg}/${projectRepo}.git"
                gitCheckoutRepo(productGitUrl, latestRelease, githubSSHCredentialsID, '.')
                registryProjectIDs = registryProjectIDs.replaceAll(" ", "").split(',')

                def getProductImagesParams = [
                    targetDir: templatesDir,
                    excludeFiles: ['fuse-online-upgrade.yml'], // Ignore the file fuse-online-upgrade as it contains an image with a typo (registry.redhat.io/fuse7/fuse-ignite-uprade)
                    registries: rhRegistries,
                    registryIDs: registryProjectIDs
                ]
                def productImages = getProductImages(getProductImagesParams)

                if (productImages.size() == 0) {
                    println "${latestRelease} is not GA. There are no images available using public registries."
                    latestRelease = componentRelease
                }

                def getPreReleaseImagesParams = [
                    imageUrls: productImages,
                    registryCredentials: targetRegistrySecret
                ]
                def preReleaseImages = getPreReleaseImages(getPreReleaseImagesParams)

                if (preReleaseImages.size != 0) {
                    println "${latestRelease} is not GA. The following images are not yet available: ${preReleaseImages}"
                    latestRelease = componentRelease
                } else {
                    println "Found ${preReleaseImages.size()} prerelease images. Verified that the latest release ${latestRelease} is GA"
                }
            }
        }
    }

    stage('Fetch Component Product Version') {
        if (productVersionLocation && productVersionIdentifier) {
            def templateUrl = "https://raw.githubusercontent.com/${projectOrg}/${projectRepo}/${latestRelease}/${productVersionLocation}"

            if (projectOrg == "integr8ly") {
                productVersion = sh(returnStdout: true, script: "curl -i '${templateUrl}' | grep '${productVersionIdentifier}' | head -n 1 | awk '{print \$3}'")
                productVersion = productVersion.replaceAll("[\"\']v*", "")
            }

            // Current tags/releases does not have the right product version in the webapp handler.
            // This can be removed once this property has been updated with the correct information in the next release
            // https://github.com/integr8ly/tutorial-web-app-operator/blob/v0.0.4/pkg/handlers/webhandler.go#L23
            if (productName == "webapp") {
                productVersion = sh(returnStdout: true, script: "curl -i '${templateUrl}' | grep '${productVersionIdentifier}' | awk -F ':' '{print \$3}'")
                productVersion = productVersion.replaceAll("v", "")
            }

            if (productName == 'redhat-sso-7-openshift-image') {
                dir('installation') {
                    productVersion = sh(returnStdout: true, script: "cat '${productVersionLocation}' | grep '${productVersionIdentifier}' | awk -F '=' '{print \$2}'")
                    productVersion = productVersion.replaceAll("\"", "")
                }
            }

            productVersion = productVersion.trim()

            if (!productVersion) {
                error "[ERROR] Product version for ${productName} was not found. Product Version: ${productVersion}"
            }
        } else {
            productVersion = latestRelease
        }

        if (isProduct) {
            isGARelease = hasNewGaRelease(productVersion, latestRelease, productName)
            componentRelease = productVersion
        } else {
            isGARelease = hasNewGaRelease(componentRelease, productVersion, productName)
        }

        println "[INFO] product version: ${productVersion}"
    }

    currentBuild.description = "current: ${componentRelease}\n latest: ${latestRelease}\n productVersion: ${productVersion}\n isGARelease: ${isGARelease}"

    dir('installation') {
        sshagent([githubSSHCredentialsID]) {
            sh 'git config --global user.name "Automatron"'
            sh 'git config --global user.email "github.eng@feedhenry.com"'

            stage('Ensure Product GA Branch') {
                gitCreateAndCheckoutBranch(gaBranch, true, true)
                gitRebaseBranch(installationGitRef, gaBranch, false)
            }

            stage('Product Version Update') {
                when(isGARelease && !isProduct) {
                    gitCommitWhenChanges("Updated ${productName} product version to ${latestRelease}") { msgs ->
                        manifestFileTxt = readFile(installationManifestFile)
                        manifestFileTxt = updateManifestVariable(manifestFileTxt, releaseTagVar, latestRelease)
                        manifestFileTxt = updateManifestVariable(manifestFileTxt, productVersionVar, productVersion)
                        writeFile file: installationManifestFile, text: manifestFileTxt
                    }
                }

                when(isGARelease && isProduct) {
                    gitCommitWhenChanges("Updated ${productName} product version to ${productVersion} in ${productVersionLocation}") { msgs ->
                        if (productName == 'redhat-sso-7-openshift-image') {
                            sh "sed -i 's/${productVersion}/${latestRelease}/' ${productVersionLocation}"
                            sh 'mkdir -p /tmp/sso'
                            sh "wget 'https://github.com/jboss-container-images/redhat-sso-7-openshift-image/archive/${productVersion}.zip' -O /tmp/sso/sso.zip"
                            unzip glob: '', zipFile: '/tmp/sso/sso.zip', dir: '/tmp/sso'
                            sh 'ls -la /tmp/sso'
                            def tmpl = sh(returnStdout: true, script: "find /tmp/sso -name 'sso*-x509-postgresql-persistent.json'")
                            tmpl = tmpl.trim()
                            fname = tmpl.split('/').last()
                            sh "cp ${tmpl} deploy/template"
                            sh "sed -ri 's/(\\s+SSO_TEMPLATE_NAME\\s+=\\s?)\"[a-zA-Z0-9\\-]+\\.json\"/\\1\"${fname}\"/' ${productVersionLocation}"
                            sh 'rm -rf /tmp/sso'
                        }
                    }
                }
            }

            stage('Push Product GA Branch') {
                boolean doPush = gaBranch != 'master'
                if (doPush) {
                  gitPushBranch(gaBranch, true)
                }
            }
        }
    }
}