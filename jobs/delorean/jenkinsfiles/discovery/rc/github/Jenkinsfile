#!groovy
@Library('delorean-pipeline-library') _

def installationGitUrl = params.installationGitUrl ?: 'git@github.com:integr8ly/installation.git'
def installationGitRef = params.installationGitRef ?: 'master'
def githubToken = params.githubToken ?: 'jenkins-github-api-token'
def githubCredentialsID = params.credentialId ?: 'jenkinsgithub'
def productVersionVar = params.productVersionVar
def projectOrg = params.projectOrg
def projectRepo = params.projectRepo
def productName = params.productName
def rcBranch = params.installationProductBranch ?: "${productName}-rc-tmp"
def installationManifestFile = './inventories/group_vars/all/manifest.yaml'

def templatesForkOrg = "integr8ly"
def templatesGitUrl = "https://github.com/${projectOrg}/${projectRepo}.git"
def templatesForkGitUrl = "https://github.com/${templatesForkOrg}/${projectRepo}.git"
def templatesDir = params.templatesDir
def latestPreRelease

String brewContainerRegistry = "brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888"
String rhContainerRegistry = "registry.redhat.io"
String rhContainerRegistry2 = "registry.access.redhat.com"
String clusterContainerRegistryPrivate = "docker-registry.default.svc:5000"

def rhRegistries = [brewContainerRegistry, rhContainerRegistry, rhContainerRegistry2]
def productImages = []
def productPreReleaseImages = []

currentBuild.displayName = "${currentBuild.displayName} ${productName}"

def getProductRegistryIDs(productName) {
    //ToDo Implement this to be dynamic
    String[] result = null
    switch (productName) {
        case '3scale':
            result = [
                    "3scale-amp25"
            ]
            break
        case 'amq-online':
            result = [
                    "amq7",
                    "amq7-tech-preview"
            ]
            break
        case 'fuse-online':
            result = [
                    "fuse7"
            ]
            break
    }
    return result
}

String getProductVersionID(productName) {
    //ToDo Implement this to be dynamic
    String result = ''
    switch (productName) {
        case '3scale':
            result = ''
            break
        case 'amq-online':
            result = '1.1'
            break
        case 'fuse-online':
            result = ''
            break
    }
    return result
}

String getLatestPreRelease(projectOrg, projectRepo, githubToken, productName) {
    //ToDo Implement this to return the latest pre release (RC) that is available, if any
    String result = null
    switch (productName) {
        case '3scale':
            result = '3scale-2.5.0-CR1'
            break
        case 'amq-online':
            result = 'amq-online-11'
            break
        case 'fuse-online':
            result = '1.6.13'
            break
    }
    return result
}

node {
    cleanWs()

    println "[INFO] productName: ${productName}, templatesGitUrl: ${templatesGitUrl}, templatesForkGitUrl: ${templatesForkGitUrl}, templatesDir: ${templatesDir}"

    stage('Fetch Installation Repo') {
        println '[INFO] Fetch Installation Repo'
        dir('installation') {
            gitCheckoutRepo(installationGitUrl, installationGitRef, githubCredentialsID, '.')
            releaseConfig = readYaml file: installationManifestFile
        }
    }

    stage('Fetch Latest Pre Release (RC)') {
        latestPreRelease = getLatestPreRelease(projectOrg, projectRepo, githubToken, productName)
        if (!latestPreRelease) {
            error "[ERROR] Unable to retrieve latest pre release version!"
        }
        println "[INFO] latestPreRelease = ${latestPreRelease}"
    }

    stage('Fetch Product Templates Repo') {
        println '[INFO] Fetch Product Templates Repo'
        dir('product-templates') {
            gitCheckoutRepo(templatesGitUrl, latestPreRelease, githubCredentialsID, '.')
        }
    }

    currentBuild.description = "current: ?\n latest: ${latestPreRelease}\n"

    dir('product-templates') {
        sshagent([githubCredentialsID]) {
            sh 'git config --global user.name "Automatron"'
            sh 'git config --global user.email "github.eng@feedhenry.com"'
            sh "git remote add intly ${templatesForkGitUrl}"
            sh "git fetch --all"

            def productRegistryIds = getProductRegistryIDs(productName)
            String productVersionId = getProductVersionID(productName)

            stage('Collect Product Images') {
                dir(templatesDir) {
                    productImages = rhRegistries.collect { registry ->
                        productRegistryIds.collect { registryID ->
                            println "Checking for registry: ${registry}, registryID: ${registryID}"
                            sh(returnStdout: true, script: "find . -name \'*.y*ml\' -exec grep -oP \'${registry}/${registryID}/[^[:blank:]]*${productVersionId}\' {} \\; | sort | uniq").split('\n')
                        }
                    }.flatten() - null - ''
                    productImages = productImages.unique()
                }
                println "[INFO] Found ${productImages.size()} product images"
                currentBuild.description = currentBuild.description + "\nImages: ${productImages.size()}\n"
            }

            stage('Verify Pre Release') {
                //ToDo Check the images are not GA here, if they all are, the pipeline should end at this point
                //iterate over productImages and produce an array of images that are not GA
                productPreReleaseImages = productImages
            }

            stage('Ensure Templates Intly Branch') {
                //ToDo
            }

            stage('Update Product Image Registry') {
                dir(templatesDir) {
                    productPreReleaseImages.each { rhImage ->
                        String clusterImage = "${clusterContainerRegistryPrivate}${new URI("docker://${rhImage}").getPath()}"
                        println("rhImage: ${rhImage}, clusterImage: ${clusterImage}")
                        String rhImageUrlEscaped = rhImage.replace("/", "\\/")
                        String clusterImageUrlEscaped = clusterImage.replace("/", "\\/")
                        sh "find . -name '*.y*ml' -exec sed -i -e 's/${rhImageUrlEscaped}/${clusterImageUrlEscaped}/g' {} \\;"
                    }
                }
                sh "git diff"
            }

            stage('Push Templates Intly Branch') {
                //ToDo
            }
        }
    }

    dir('installation') {
        sshagent([githubCredentialsID]) {
            sh 'git config --global user.name "Automatron"'
            sh 'git config --global user.email "github.eng@feedhenry.com"'

            stage('Ensure Product RC Branch') {
                //ToDo
            }

            stage('Product Version Update') {
                //ToDo
            }

            stage('Image Sync Meta Update') {
                //ToDo
            }

            stage('Push Product RC Branch') {
                //ToDo
            }
        }
    }
}
