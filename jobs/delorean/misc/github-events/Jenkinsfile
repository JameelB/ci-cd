#!groovy
@Library('delorean-pipeline-library') _

import org.kohsuke.github.GHCommitState
import org.kohsuke.github.GHPullRequest
import org.kohsuke.github.GitHub
import org.kohsuke.github.GitHubBuilder

def ghUtils = new org.integr8ly.GitHubUtils()

String githubEventStr = params.sqs_body
String gitBranch = ""
String prUrl = ""

String githubUserPassCredentialsID = "githubjenkins"
final String ghCommitStatusContext = 'delorean/integration-tests'

currentBuild.description = "sqsMessageId: ${params.sqs_messageId}"

node {
    cleanWs()
    stage('Parse GitHub Event') {
        def ghEvent = readJSON text: githubEventStr

        if (ghEvent.eventType == "push") {
            gitBranch = ghEvent['ref'].tokenize('/').last()
            currentBuild.description = "${currentBuild.description}\nevent: push\nbranch: ${gitBranch}"
        } 

        if (ghEvent.eventType == "pull_request") {
            def pullRequest = ghEvent.pull_request
            prUrl = pullRequest.html_url
            gitBranch = pullRequest.head.ref

            currentBuild.description = "${currentBuild.description}\nevent: pull_request\nbranch: ${gitBranch}\npr: ${prUrl}"
        }
    }

    stage('Trigger branch job') {
        when(gitBranch.endsWith("-ga") || gitBranch.endsWith("-rc") || gitBranch.endsWith("-latest")) {
            println "Run branch job for ${productName}/${branchType}"
            def branchType = gitBranch.split("-").last()
            def productName = gitBranch.minus("-${branchType}")
            def jobName = "delorean-${productName}/${branchType}/branch"
            build job: jobName, wait: false
        }
    }
}
